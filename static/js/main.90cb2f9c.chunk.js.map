{"version":3,"sources":["Forecastblock.js","Weatherinfo.js","Searhform.js","Favlist.js","App.js","index.js"],"names":["ForeCastBlock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlerClick","setState","isChartShown","state","filtered","props","requestForecast","list","filter","item","hour","Date","dt_txt","getHours","data","labels","map","date","getDate","month","getMonth","hours","concat","datasets","label","fill","lineTension","borderColor","pointRadius","pointHitRadius","pointStyle","Math","round","main","temp","filteredFunc","increment","today","incrementDay","setDate","curDay","curMonth","arr","console","log","tdDateJsx","react_default","a","createElement","className","arrToJsx","key","dt","id","wind","speed","weather","description","length","includes","Fragment","theader","showHidebut","cod","onClick","es","React","Component","WeatherInfo","_this$props$weatherDa","weatherData","name","itemById","favCitieslist","locationId","starIco","favicon","src","alt","removeFromFavList","addToFav","title","width","humidity","pressure","Forecastblock_ForeCastBlock","SearchForm","type","placeholder","onChange","handleChange","handleClick","Favlist","updFavList","listId","citiesList","toString","url","fetch","then","resp","json","updList","cityName","currentTemp","updateFavListByTemp","_this2","setInterval","_this3","favList","App","e","_e$target","target","value","defineProperty","charAt","toUpperCase","slice","_this$state$requestCu","requestCurrentWeather","locationToPush","toConsumableArray","unionBy","localStorage","setItem","JSON","stringify","fetchToState","dataTypeLoaded","response","location","arguments","undefined","requestedLocation","apikey","preUrl","url1","url2","getUserLocalWeatherData","res","localUserData","lat","latitude","lon","longitude","locationName","city","_this$state$localUser","localCurrentWeather","favlist","parse","getItem","_this$state","Searhform","Weatherinfo_WeatherInfo","src_Favlist","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.90cb2f9c.chunk.js","sourcesContent":["import React from 'react';\nimport { Line, Bar } from 'react-chartjs-2'; //импорт бибилиотеки для отрисовки графиков\n\nexport default class ForeCastBlock extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tisChartShown: false  //здесь будет своё состояние: отображен ли график\n\t\t}\n\t}\n\n\t//обрабатываем нажатие на кнопку *скрыть/показать график*\n\thandlerClick = () => {\n\t\tthis.setState({ isChartShown: !this.state.isChartShown })\n\t}\n\n\trender() {\n\t\t//здесь будем работать с данными о прогнозе - рисовать по ним таблицу и график\n\t\tconst filtered = this.props.requestForecast.list.filter(item => {\n\t\t\tconst data = new Date(item.dt_txt);\n\t\t\tconst hour = data.getHours();\n\t\t\treturn (hour === 6 || hour === 15 || hour === 21) ? item : null; //отфильтруем данные по трем часовым точкам\n\t\t})\n\n\t\t//данные для отрисовки графика(ов)\n\t\tconst labels = filtered.map(item => {\n\t\t\tconst data = new Date(item.dt_txt)\n\t\t\tconst date = data.getDate();\n\t\t\tconst month = data.getMonth();\n\t\t\tconst mlist = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\t\t\tconst hours = data.getHours();\n\t\t\treturn `${date}/${month + 1} ${hours}h`\n\t\t})\n\n\t\tconst data = {\n\t\t\tlabels: labels,\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Temp',\n\t\t\t\t\tfill: false,\n\t\t\t\t\tlineTension: 0.1,\n\t\t\t\t\tborderColor: 'rgba(223, 117, 41 ,1)',\n\t\t\t\t\tpointRadius: 4,\n\t\t\t\t\tpointHitRadius: 5,\n\t\t\t\t\tpointStyle: 'rectRounded',\n\t\t\t\t\tdata: filtered.map(item => Math.round(item.main.temp - 273)),\n\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\n\t\t/*вспомогательная функцию для отрисовки строк таблицы. Зная, что прогноз дается максимум на 5 дней, включая текущий,\n\t\tбудем передавать туда шаг увеличения дня от 0 до 4. Функция будет возвращать JSX, \n\t\t*/\n\t\tconst filteredFunc = increment => {\n\t\t\t//нормализуем формат дня/месяца для пограничных дат\n\t\t\tconst today = new Date();\n\t\t\tconst incrementDay = new Date(today.setDate(today.getDate() + increment));\n\t\t\tconst mlist = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\t\t\tconst curDay = incrementDay.getDate();\n\t\t\tconst curMonth = mlist[incrementDay.getMonth()];\n\n\t\t\t//сортируем входящий массив по нужному дню\n\t\t\tconst arr = filtered.filter(item => {\n\n\t\t\t\tconst data = new Date(item.dt_txt);\n\t\t\t\tconst date = data.getDate();\n\t\t\t\treturn date === curDay ? item : null;\n\t\t\t});\n\t\t\tconsole.log('arr', arr)\n\t\t\tconst tdDateJsx = <td className=\"date\">{curDay} {curMonth}</td>\n\t\t\t//формируем JSX для отрисовки строкитаблицы с данными\n\t\t\tconst arrToJsx = arr.map(item => {\n\t\t\t\treturn <td key={item.dt}>\n\t\t\t\t\t<span id=\"temp\">{Math.round(item.main.temp - 273)} °C, </span>\n\t\t\t\t\twind: {Math.round(item.wind.speed)}<br />\n\t\t\t\t\t{item.weather[0].description}\n\t\t\t\t</td>\n\t\t\t})\n\n\t\t\tif (!arr.length) return; //если данных не хватило на 5 день, то не рисуем строку\n\t\t\t//далее проверяем данные дня (для начального и конечного), если они не на полный день, рисуем строку со сдвигом ячеек\n\t\t\tif (!arr[0].dt_txt.includes('06:00')) {\n\n\t\t\t\tif (!arr[0].dt_txt.includes('15:00')) {\n\t\t\t\t\treturn <>{tdDateJsx}<td></td><td></td>{arrToJsx}</>\n\t\t\t\t}\n\t\t\t\treturn <>{tdDateJsx}<td></td>{arrToJsx}</>\n\t\t\t}\n\t\t\treturn <>{tdDateJsx}{arrToJsx}</>\n\t\t}\n\n\t\t//хедер таблицы\n\t\tconst theader = <thead><tr><th></th><th>06:00</th><th>15:00</th><th>21:00</th></tr></thead>\n\t\t// надпись на кнопке скрыть/показать\n\t\tconst showHidebut = this.state.isChartShown ? 'Hide chart' : 'Show temp chart below'\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.props.requestForecast.cod === '200' && //если прогноз получен, рисуем таблицу\n\t\t\t\t\t<div className=\"tablediv \">\n\n\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t<caption >Forecast:</caption>\n\t\t\t\t\t\t\t{theader}\n\t\t\t\t\t\t\t<tbody>{/* рендерим строки таблицы */}\n\t\t\t\t\t\t\t\t<tr>{filteredFunc(0)}</tr>\n\t\t\t\t\t\t\t\t<tr>{filteredFunc(1)}</tr>\n\t\t\t\t\t\t\t\t<tr>{filteredFunc(2)}</tr>\n\t\t\t\t\t\t\t\t<tr>{filteredFunc(3)}</tr>\n\t\t\t\t\t\t\t\t<tr>{filteredFunc(4)}</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t\t<button className=\"showchart my-2\" onClick={this.handlerClick}>{showHidebut}</button>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{this.state.isChartShown && //показываем/скрываем график\n\t\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t\t<Line data={data} />\n\t\t\t\t\t</div>}\n\t\t\t</div>\n\t\t);\n\t}\n\n\n\n\n}\n","import React from 'react';\nimport ForecastBlock from './Forecastblock'; //подключаем компонент для отображения прогноза\n\nexport default class WeatherInfo extends React.Component {\n\n\trender() {\n\t\tconst { name, main, wind, id, weather } = this.props.weatherData\n\n\t\t//проверяем, есть ли город в избранном, фильтруя список избранного по id\n\t\tconst itemById = this.props.favCitieslist.filter(item => item.locationId === id)\n\t\tconst starIco = itemById.length ? 'star1.svg' : 'star0.svg'; //условие для выборки иконки\n\n\t\t//вещаем на иконку обработчик удалить/добавить и своейства, в зависимости от от того, есть ли город в списке\n\t\tconst favicon = <img src={starIco} alt=\"\" \n\t\t\tonClick={itemById.length ? () => this.props.removeFromFavList(id) : this.props.addToFav}\n\t\t\ttitle={itemById.length ? \"Remove from Favorites\" : \"Add to Favorites\"} width=\"25px\" />\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{/*создаем компонент, отображающий данные по поиску*/}\n\t\t\t\t<div className=\"curr-temp weather px-2 py-1\">\n\t\t\t\t\t<span className=\"current-header\">Weather in <span className=\"city\">{name}</span>:</span> {favicon}\n\t\t\t\t\t<br />\n\t\t\t\t\t<span className=\"temp\">Temp: {Math.round(main.temp - 273)} °C, </span>\n\t\t\t\t\twind: {wind.speed} m/s,\n\t\t\t\t\thumidity: {main.humidity}%,\n\t\t\t\t\tpressure: {Math.round(main.pressure * 0.7501)}&nbsp;mmHg,&nbsp;\n\t\t\t\t\t{weather[0].description}\n\t\t\t\t</div>\n\t\t\t\t<ForecastBlock // отображаем компонент с прогнозом\n\t\t\t\t\trequestForecast={this.props.requestForecast} />\n\t\t\t</>\n\t\t)\n\t}\n\n}\n\n\n","import React from 'react';\n//компонент для отображения поля поиска и обработки нажатия на кнопку\nfunction SearchForm(props) {\n\treturn (\n\t\t<>\n\t\t\t<div className=\"input-group mb-3 pt-3 col-centered\">\n\t\t\t\t<input type=\"text\" className=\"form-control\" \n\t\t\t\tplaceholder=\"Enter city name\" \n\t\t\t\tname=\"requestedLocation\"\n\t\t\t\tonChange={props.handleChange}/>\n\t\t\t\t<div className=\"input-group-append\">\n\t\t\t\t\t<button className=\"search-but mr-3 btn  bg-warning text-white\" type=\"button\"\n\t\t\t\t\tonClick={() => props.handleClick()}\n\t\t\t\t\t>Search</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default SearchForm;","import React from 'react';\n\n//рендерит Избранное\nclass Favlist extends React.Component {\n\n  //метод для обновления температур в списке избранного\n  updFavList = () => {\n    const list = this.props.citiesList;\n    const listId = list.map(item => item.locationId).toString() //извлекаем id городов и делаем строку\n    const apikey = '2b0c757f5810cdb1eb3a945f283be600';\n    const preUrl = 'https://api.openweathermap.org/data/2.5/';\n    const url = `${preUrl}group?id=${listId}&appid=${apikey}`;\n\n    fetch(url).then(resp => resp.json()).then(resp => { //запрашиваем данные для списка городов и обновляем избранное\n      const updList = resp.list.map(item => {\n        item = {\n          cityName: item.name,\n          locationId: item.id,\n          currentTemp: `${Math.round(item.main.temp - 273)} °C`\n        }\n        return item\n      })\n      this.props.updateFavListByTemp(updList);\n    })\n  }\n\n  //обновляем показания температуры в избранных городах при загружке и каждые 15 минут\n  componentDidMount() {\n    this.updFavList();\n    setInterval(() => {\n      this.updFavList();\n    }, (15 * 60 * 1000));\n  }\n\n  render() {\n    const list = this.props.citiesList;\n    \n    //создаем  JSX для отображения списка избранного\n    const favList = list.map((item) => {\n      return (\n        <React.Fragment key={item.locationId} >\n          <div> {/*вешаем обработчики на клик по городу и для удаления */}\n            <span className=\"ml-0 remove\" title=\"remove from list\" \n            onClick={() => this.props.removeFromFavList(item.locationId)}>&times;</span>\n            <span className=\" favlist-item ml-0\" \n            onClick={() => this.props.handleClick(item.cityName)} title=\"click to see weatherinfo\">\n              {item.cityName} {item.currentTemp}\n            </span>\n          </div>\n        </React.Fragment>\n      )\n      \n    })\n\n    return (\n      <>\n        {/* рендерим список избранного */}\n        {favList}\n\n      </>\n\n    )\n  }\n}\n\nexport default Favlist;","import React from 'react';\nimport './App.css';\nimport Weatherinfo from './Weatherinfo'; // компонент рендерит погоду и прогноз в искомом городе\nimport Searchform from './Searhform'; // рендерит форму для ввода поискового запроса\nimport Favlist from './Favlist'; // рендерит список избранных городов\nimport unionBy from 'lodash.unionby'; // возьмем ф-ю для добавления значения в массив, если оно уникально\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tlocalCurrentWeather: {}, //здесь сохраним данные о погоде в локации юзера\n\t\t\tlocalUserData: { // данные о его локации\n\t\t\t\tlat: null,\n\t\t\t\tlon: null,\n\t\t\t\tlocationName: null\n\t\t\t},\n\t\t\tfavCitieslist: [], //список мест в избранное\n\t\t\trequestedLocation: \"\", // здесь храним location, по которой делаем поиск\n\t\t\trequestCurrentWeather: {}, //погода по запрашиваемому месту\n\t\t\trequestForecast: {}, // прогноз по запрашиваемому месту\n\t\t};\n\t};\n\n\t//делаем поисковое поле ввода контролируемым, данные из него добавляем в requestedLocation\n\thandleChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tthis.setState({ [name]: value.charAt(0).toUpperCase() + value.slice(1) })\n\t};\n\n\t//добавляем город из результата поиска в избранное\n\taddToFav = () => {\n\t\tconst { id, name, main } = this.state.requestCurrentWeather;\n\t\tconst locationToPush = [{ //создаем объект для добавления в список\n\t\t\tcityName: name,\n\t\t\tlocationId: id,\n\t\t\tcurrentTemp: `${Math.round(main.temp - 273)} °C`\n\t\t}];\n\t\t//запишем и будем хранить данные избранного в localStorage\n\t\tconst favList = [...this.state.favCitieslist];\n\t\tconst updList = unionBy(favList, locationToPush, 'locationId'); //используем ф-ю из lodash, добавляем локацию в избранное, если его там нет\n\t\tthis.setState({ favCitieslist: updList });\n\t\tlocalStorage.setItem('favlist', JSON.stringify(updList));\n\t};\n\n\t//удаляем город из избранного\n\tremoveFromFavList = (id) => {\n\t\tconst favList = [...this.state.favCitieslist];\n\t\tconst updList = favList.filter(item => item.locationId !== id)\n\t\tthis.setState({ favCitieslist: updList });\n\t\tlocalStorage.setItem('favlist', JSON.stringify(updList));\n\t};\n\n\t//обработчик для обновления значения температур в стейте /Избранное/\n\tupdateFavListByTemp = (list) => {\n\t\tthis.setState({ favCitieslist: list });\n\t\tlocalStorage.setItem('favlist', JSON.stringify(list));\n\t};\n\n\n\t//вспомогательный метод для запроса данных с API и обнвления нужного стейта\n\tfetchToState = (url, key, dataTypeLoaded) => {\n\t\tfetch(url)\n\t\t\t.then(response => response.json()).then(response => {\n\t\t\t\tthis.setState({\n\t\t\t\t\t[key]: response\n\t\t\t\t});\n\t\t\t})\n\t};\n\n\t//обрабатываем поисковой запрос\n\thandleClick = (location = this.state.requestedLocation) => {\n\t\tconst apikey = '2b0c757f5810cdb1eb3a945f283be600';\n\t\tconst preUrl = 'https://api.openweathermap.org/data/2.5/';\n\t\tconst url1 = `${preUrl}weather?q=${location}&appid=${apikey}`;\n\t\tthis.fetchToState(url1, 'requestCurrentWeather', 'requestDataLoaded'); //запрашиваем данные о текущей погоде и обновляем стейт\n\n\t\tconst url2 = `${preUrl}forecast?q=${location}&appid=${apikey}`;\n\t\tthis.fetchToState(url2, 'requestForecast', 'requestDataLoaded'); //запрашиваем данные о прогнозе\n\n\t};\n\n\t//данный метод запрашивет погоду по локации пользователя\n\tgetUserLocalWeatherData = () => {\n\t\tconst apikey = '2b0c757f5810cdb1eb3a945f283be600';\n\t\tconst preUrl = 'https://api.openweathermap.org/data/2.5/'\n\n\t\tfetch(`https://json.geoiplookup.io/`) // обращаемся к API, который определяет ip юзера и его локацию\n\t\t\t.then(res => res.json()).then(resp => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tlocalUserData: {\n\t\t\t\t\t\tlat: resp.latitude,\n\t\t\t\t\t\tlon: resp.longitude,\n\t\t\t\t\t\tlocationName: resp.city\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst { lat, lon } = this.state.localUserData; //по этим данным запрашивается погоду для локации юзера\n\t\t\t\tconst url1 = `${preUrl}weather?lat=${lat}&lon=${lon}&appid=${apikey}`;\n\t\t\t\tthis.fetchToState(url1, 'localCurrentWeather', 'localDataLoaded');\n\t\t\t\tthis.handleClick(this.state.localUserData.locationName);\n\t\t\t})\n\t};\n\n\tcomponentWillMount() {\n\t\tthis.getUserLocalWeatherData(); //при загрузке показываем погоду в локации юзера\n\t\tconst favlist = JSON.parse(localStorage.getItem('favlist')); //берем данные из localStorage\n\t\tif (favlist) this.setState({ favCitieslist: favlist }); //если там не пусто, обновляем стейт для избранного\n\t  this.setState({requestedLocation: this.state.localUserData.locationName});\n\t};\n\n\trender() {\n\t\tconst { localCurrentWeather,\n\t\t\trequestCurrentWeather, requestForecast } = this.state;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"header pl-4 pt-2 m-0\">WEATHER FINDER</div>\n\t\t\t\t<div className=\"main\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"col-sm-9 px-1\">\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t<Searchform // компонент выводящий и обрабатывающий действия с полем поиска\n\t\t\t\t\t\t\t\t\thandleChange={this.handleChange} //передаем ввод в стейт\n\t\t\t\t\t\t\t\t\thandleClick={this.handleClick} // передаем обрабочик нажатия на кнопку *поиск*\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{requestForecast.cod === '200' && //если данные о текущей погоде искомого места\n\t\t\t\t\t\t\t\t\trequestCurrentWeather.cod === 200 && // и данные о прогнозе получены\n\n\t\t\t\t\t\t\t\t\t<Weatherinfo // то отображаем компонент, выводящий погоду и прогноз\n\t\t\t\t\t\t\t\t\t\tweatherData={requestCurrentWeather} // передаем полученные данные о прогоде\n\t\t\t\t\t\t\t\t\t\trequestForecast={this.state.requestForecast} //прогноз\n\t\t\t\t\t\t\t\t\t\taddToFav={this.addToFav} //обработчик добавления в избранное\n\t\t\t\t\t\t\t\t\t\tremoveFromFavList={this.removeFromFavList} // удаления из избранного\n\t\t\t\t\t\t\t\t\t\tfavCitieslist={this.state.favCitieslist} // стейт с избранным\n\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col-sm-3 p-0 pb-2 favlist \">\n\t\t\t\t\t\t\t\t<div className=\"favhead bg-success text-white text-center pb-1 mb-1\">Favorites </div>\n        \n\t\t\t\t\t\t\t\t{this.state.favCitieslist.length > 0 &&  // отображаем избранное, если список не пуст\n\t\t\t\t\t\t\t\t\t<Favlist //передаем в компонент данные и методы для работы со списком избранного\n\t\t\t\t\t\t\t\t\t\tcitiesList={this.state.favCitieslist}\n\t\t\t\t\t\t\t\t\t\tremoveFromFavList={this.removeFromFavList}\n\t\t\t\t\t\t\t\t\t\thandleClick={this.handleClick}\n\t\t\t\t\t\t\t\t\t\tupdateFavListByTemp={this.updateFavListByTemp}\n\t\t\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t};\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}